{"version":3,"file":"static/js/434.a9db8b1a.chunk.js","mappings":"kTAIAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAyB,CACvBC,OAAQ,mBACRC,cACE,8NAGG,IAAMC,EAAmB,mCAAG,oGACVH,EAAAA,EAAAA,IAAU,sBADA,cAC3BI,EAD2B,yBAE1BA,EAASC,KAAKC,SAFY,2CAAH,qDAKnBC,EAAc,mCAAG,WAAMC,GAAN,uFACLR,EAAAA,EAAAA,IAAA,gBAAmBQ,IADd,cACtBJ,EADsB,yBAErBA,EAASC,MAFY,2CAAH,sDAKdI,EAAiB,mCAAG,WAAMC,GAAN,0EAC1BA,EAD0B,iEAERV,EAAAA,EAAAA,IAAA,eAA0B,CAC/CW,OAAQ,CACNC,MAAOF,EACPG,eAAe,KALY,cAEzBT,EAFyB,yBAQxBA,EAASC,KAAKC,SARU,2CAAH,sDAWjBQ,EAAc,mCAAG,WAAMN,GAAN,uFACLR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,aADK,cACtBJ,EADsB,yBAErBA,EAASC,KAAKU,MAFO,2CAAH,sDAKdC,EAAiB,mCAAG,WAAMR,GAAN,uFACRR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,aADQ,cACzBJ,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,qD,6KCnCjBW,EAAoBC,EAAAA,EAAAA,GAAH,4HASjBC,EAAaD,EAAAA,EAAAA,EAAH,uF,SCkBvB,EAzBgB,WACd,MCDkC,WAClC,OAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACAH,GAAa,GACbF,EAAgB,IAChB,IAAMQ,EAAS,mCAAG,8GAESd,EAAAA,EAAAA,IAAkBW,GAF3B,UAERvB,EAFQ,OAGdkB,EAAgBlB,GACXA,EAJS,sBAIO,IAAI2B,MAAM,oCAJjB,uDAMdL,EAAS,KAAMM,SAND,yBAQdR,GAAa,GARC,4EAAH,qDAWfM,GAdoB,CAerB,GAAE,CAACH,IAEG,CAAEN,aAAAA,EAAcE,UAAAA,EAAWE,MAAAA,EACnC,CDzB4CQ,GAAnCZ,EAAR,EAAQA,aAAcE,EAAtB,EAAsBA,UAAWE,EAAjC,EAAiCA,MACjC,OACE,gCACGF,IAAa,SAACW,EAAA,EAAD,KACd,SAACjB,EAAD,UACGI,GACCA,EAAac,KAAI,YAA0C,IAAvC3B,EAAsC,EAAtCA,GAAI4B,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QACpCC,EAAc,IAAIC,KAAKH,GAAYI,cACzC,OACE,2BACE,wBACE,4BAASL,OAEX,uBAAIE,KACJ,SAACnB,EAAD,UAAaoB,MALN/B,EAQZ,MAEJiB,IAAS,uBAAIA,MAGnB,C","sources":["api-service/api-service.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","hooks/useFetchMovieReviews.js"],"sourcesContent":["import axios from 'axios';\n\n// const API_KEY = 'fc003692354e60dd191d57f224193ebc';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers = {\n  accept: 'application/json',\n  Authorization:\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmYzAwMzY5MjM1NGU2MGRkMTkxZDU3ZjIyNDE5M2ViYyIsInN1YiI6IjY0OTRiYzBkOTdlYWI0MDE0NjUzYTg0OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.eRloYStb0E7htYX_KZc4cK1BXIC7CsOABKJUGMS2eo4',\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get('trending/movie/day');\n  return response.data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(`movie/${id}`);\n  return response.data;\n};\n\nexport const fetchMoviesByName = async value => {\n  if (!value) return;\n  const response = await axios.get(`search/movie`, {\n    params: {\n      query: value,\n      include_adult: false,\n    },\n  });\n  return response.data.results;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(`movie/${id}/credits`);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews`);\n  return response.data.results;\n};\n","import styled from '@emotion/styled';\n\nexport const ReviewsListStyled = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n\n  li {\n    border-bottom: 1px solid #e9e4e4;\n  }\n`;\n\nexport const ReviewDate = styled.p`\n  display: block;\n  margin-left: auto;\n\n  font-size: 12px;\n`;\n","import { useFetchMovieReviews } from 'hooks/useFetchMovieReviews';\nimport { Loader } from 'components/Loader';\nimport { ReviewDate, ReviewsListStyled } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieReviews, isLoading, error } = useFetchMovieReviews();\n  return (\n    <>\n      {isLoading && <Loader />}\n      <ReviewsListStyled>\n        {movieReviews &&\n          movieReviews.map(({ id, author, updated_at, content }) => {\n            const normUpdDate = new Date(updated_at).toUTCString();\n            return (\n              <li key={id}>\n                <p>\n                  <strong>{author}</strong>\n                </p>\n                <p>{content}</p>\n                <ReviewDate>{normUpdDate}</ReviewDate>\n              </li>\n            );\n          })}\n      </ReviewsListStyled>\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default Reviews;\n","import { fetchMovieReviews } from 'api-service/api-service';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchMovieReviews = () => {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    setMovieReviews([]);\n    const fetchData = async () => {\n      try {\n        const response = await fetchMovieReviews(movieId);\n        setMovieReviews(response);\n        if (!response) throw new Error('Sorry. There are no reviews ... ');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return { movieReviews, isLoading, error };\n};\n"],"names":["axios","accept","Authorization","fetchTrendingMovies","response","data","results","fetchMovieById","id","fetchMoviesByName","value","params","query","include_adult","fetchMovieCast","cast","fetchMovieReviews","ReviewsListStyled","styled","ReviewDate","useState","movieReviews","setMovieReviews","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchData","Error","message","useFetchMovieReviews","Loader","map","author","updated_at","content","normUpdDate","Date","toUTCString"],"sourceRoot":""}