{"version":3,"file":"static/js/844.2c8f8288.chunk.js","mappings":"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","sources":["api-service/api-service.js","helpers/color.js","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","hooks/useFetchTrendingMovies.js","hooks/useFetchMoviesByName.js","hooks/useFetchMovieById.js","components/SearchMovie/SearchMovie.styled.jsx","components/SearchMovie/SearchMovie.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\n// const API_KEY = 'fc003692354e60dd191d57f224193ebc';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers = {\n  accept: 'application/json',\n  Authorization:\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmYzAwMzY5MjM1NGU2MGRkMTkxZDU3ZjIyNDE5M2ViYyIsInN1YiI6IjY0OTRiYzBkOTdlYWI0MDE0NjUzYTg0OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.eRloYStb0E7htYX_KZc4cK1BXIC7CsOABKJUGMS2eo4',\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get('trending/movie/day');\n  return response.data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(`movie/${id}`);\n  return response.data;\n};\n\nexport const fetchMoviesByName = async value => {\n  if (!value) return;\n  const response = await axios.get(`search/movie`, {\n    params: {\n      query: value,\n      include_adult: false,\n    },\n  });\n  console.log('response', response);\n  return response.data.results;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(`movie/${id}/credits`);\n  console.log(response);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews`);\n  console.log(response);\n  return response.data.results;\n};\n","export const colors = {\n  headerText: '#434852',\n  linkText: '#36393f',\n  linkTextHover: '#e78310',\n  buttonActiveBackground: '#5e5e5e',\n  buttonHoverBackground: '#18b4db',\n  buttonActiveText: '#fff',\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { colors } from 'helpers';\n\nexport const LinkStyled = styled(Link)`\n  text-decoration: none;\n  color: ${colors.linkText};\n\n  &:hover {\n    color: ${colors.linkTextHover};\n  }\n`;\n\nexport const ListItemStyled = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const ListStyled = styled.ul`\n  margin: 0;\n  padding-left: 18px;\n  list-style-type: square;\n\n  * {\n    /* margin: 0; */\n    /* padding: 0; */\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { LinkStyled, ListItemStyled, ListStyled } from './MoviesList.styled';\nimport { routes } from 'service/routes-service';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  console.log(location);\n  return (\n    <ListStyled>\n      {movies.map(({ id, title }) => (\n        <ListItemStyled key={id}>\n          <LinkStyled to={`${routes.MOVIES}/${id}`} state={{ from: location }}>\n            {title}\n          </LinkStyled>\n        </ListItemStyled>\n      ))}\n    </ListStyled>\n  );\n};\n","import { fetchTrendingMovies } from 'api-service/api-service';\nimport { useEffect, useState } from 'react';\n\nexport const useFetchTrendingMovies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setMovies([]);\n    const fetchData = async () => {\n      try {\n        const response = await fetchTrendingMovies();\n        setMovies(response);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  return { movies, isLoading, error };\n};\n","import { fetchMoviesByName } from 'api-service';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport const useFetchMoviesByName = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) {\n      setMovies([]);\n      return;\n    }\n\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const response = await fetchMoviesByName(query);\n        setMovies(response);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [query]);\n\n  return { movies, isLoading, error };\n};\n","import { fetchMovieById } from 'api-service/api-service';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchMovieById = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    setMovie({});\n    const fetchData = async () => {\n      try {\n        const response = await fetchMovieById(movieId);\n        setMovie(response);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return { movie, isLoading, error };\n};\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const FormWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n\n  margin-bottom: 24px;\n`;\n\nexport const FieldStyled = styled(Field)`\n  display: block;\n  height: 28px;\n  padding-left: 4px;\n  margin-right: 4px;\n  font-size: 14px;\n\n  border: 1px solid transparent;\n  border-radius: 2px;\n  outline: 1px solid gray;\n\n  &::placeholder {\n    color: #646363;\n  }\n\n  &:focus {\n    outline: 1px solid #e78310;\n  }\n`;\n\nexport const ButtonStyled = styled.button`\n  display: block;\n  height: 34px;\n\n  font-size: 14px;\n  font-weight: 1.25;\n  border-radius: 2px;\n  color: #fff;\n\n  background-color: #646363;\n  border: 1px solid transparent;\n  border-radius: 2px;\n\n  &:hover {\n    color: #646363;\n    background-color: #fff;\n    border-color: #646363;\n  }\n\n  &:active {\n    color: #fff;\n    background-color: #e78310;\n    border-color: transparent;\n  }\n`;\n","import { Form, Formik } from 'formik';\nimport { ButtonStyled, FieldStyled, FormWrapper } from './SearchMovie.styled';\n\nexport const SearchMovie = ({ query, onSubmit }) => {\n  const initialValues = {\n    searchQuery: query ? query : '',\n  };\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={onSubmit}>\n      <Form>\n        <FormWrapper>\n          <FieldStyled\n            type=\"text\"\n            name=\"searchQuery\"\n            placeholder=\"Search movie by name\"\n          />\n          <ButtonStyled type=\"submit\">Search</ButtonStyled>\n        </FormWrapper>\n      </Form>\n    </Formik>\n  );\n};\n","import { Outlet, useSearchParams } from 'react-router-dom';\nimport { useFetchMoviesByName } from '../hooks';\nimport { MoviesList } from 'components/MoviesList';\nimport { Loader } from 'components/Loader';\nimport { SearchMovie } from 'components/SearchMovie';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const handleSubmit = ({ searchQuery }) => {\n    if (!searchQuery) {\n      setSearchParams({});\n\n      return;\n    }\n    setSearchParams({ query: searchQuery });\n  };\n\n  const { movies, isLoading, error } = useFetchMoviesByName();\n  return (\n    <section>\n      <h2>Movies</h2>\n      <SearchMovie query={query} onSubmit={handleSubmit} />\n      {isLoading && <Loader />}\n      {movies && <MoviesList movies={movies} />}\n      {error && <p>{error}</p>}\n      <Outlet />\n    </section>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","accept","Authorization","fetchTrendingMovies","response","data","results","fetchMovieById","id","fetchMoviesByName","value","params","query","include_adult","console","log","fetchMovieCast","cast","fetchMovieReviews","colors","LinkStyled","styled","Link","ListItemStyled","ListStyled","MoviesList","movies","location","useLocation","map","title","to","routes","state","from","useFetchTrendingMovies","useState","setMovies","isLoading","setIsLoading","error","setError","useEffect","fetchData","message","useFetchMoviesByName","useSearchParams","get","useFetchMovieById","movie","setMovie","movieId","useParams","FormWrapper","FieldStyled","Field","ButtonStyled","SearchMovie","onSubmit","initialValues","searchQuery","type","name","placeholder","searchParams","setSearchParams","Loader"],"sourceRoot":""}