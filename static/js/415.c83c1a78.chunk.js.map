{"version":3,"file":"static/js/415.c83c1a78.chunk.js","mappings":"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","sources":["api-service/api-service.js","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","helpers/color.js","hooks/useFetchTrendingMovies.js","hooks/useFetchMoviesByName.js","hooks/useFetchMovieById.js","pages/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\n// const API_KEY = 'fc003692354e60dd191d57f224193ebc';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers = {\n  accept: 'application/json',\n  Authorization:\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmYzAwMzY5MjM1NGU2MGRkMTkxZDU3ZjIyNDE5M2ViYyIsInN1YiI6IjY0OTRiYzBkOTdlYWI0MDE0NjUzYTg0OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.eRloYStb0E7htYX_KZc4cK1BXIC7CsOABKJUGMS2eo4',\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get('trending/movie/day');\n  return response.data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(`movie/${id}`);\n  return response.data;\n};\n\nexport const fetchMoviesByName = async value => {\n  if (!value) return;\n  const response = await axios.get(`search/movie`, {\n    params: {\n      query: value,\n      include_adult: false,\n    },\n  });\n  return response.data.results;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(`movie/${id}/credits`);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews`);\n  return response.data.results;\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { colors } from 'helpers';\n\nexport const LinkStyled = styled(Link)`\n  text-decoration: none;\n  color: ${colors.linkText};\n\n  &:hover {\n    color: ${colors.linkTextHover};\n  }\n`;\n\nexport const ListItemStyled = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const ListStyled = styled.ul`\n  margin: 0;\n  padding-left: 18px;\n  list-style-type: square;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { LinkStyled, ListItemStyled, ListStyled } from './MoviesList.styled';\nimport { routes } from 'service/routes-service';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ListStyled>\n      {movies.map(({ id, title }) => (\n        <ListItemStyled key={id}>\n          <LinkStyled to={`${routes.MOVIES}/${id}`} state={{ from: location }}>\n            {title}\n          </LinkStyled>\n        </ListItemStyled>\n      ))}\n    </ListStyled>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n    })\n  ),\n};\n","export const colors = {\n  headerText: '#434852',\n  linkText: '#36393f',\n  linkTextHover: '#e78310',\n  buttonActiveBackground: '#5e5e5e',\n  buttonHoverBackground: '#18b4db',\n  buttonActiveText: '#fff',\n};\n","import { fetchTrendingMovies } from 'api-service/api-service';\nimport { useEffect, useState } from 'react';\n\nexport const useFetchTrendingMovies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setMovies([]);\n    const fetchData = async () => {\n      try {\n        const response = await fetchTrendingMovies();\n        if (!response.length)\n          throw new Error('Sorry. There are no movies ... ');\n        setMovies(response);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  return { movies, isLoading, error };\n};\n","import { fetchMoviesByName } from 'api-service';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport const useFetchMoviesByName = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const response = await fetchMoviesByName(query);\n        setMovies(response);\n        if (!response.length)\n          throw new Error('Sorry. There are no movies ... ');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [query]);\n\n  return { movies, isLoading, error };\n};\n","import { fetchMovieById } from 'api-service/api-service';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchMovieById = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    setMovie({});\n    const fetchData = async () => {\n      try {\n        const response = await fetchMovieById(movieId);\n        if (!Object.entries(response).length)\n          throw new Error('Sorry. There are no movies ... ');\n        setMovie(response);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return { movie, isLoading, error };\n};\n","import { Loader } from 'components/Loader';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useFetchTrendingMovies } from 'hooks';\n\nconst Home = () => {\n  const { movies, isLoading, error } = useFetchTrendingMovies();\n\n  return (\n    <section>\n      <h2>Trending today</h2>\n      {isLoading && <Loader />}\n      <MoviesList movies={movies} />\n      {error && <p>{error}</p>}\n    </section>\n  );\n};\n\nexport default Home;\n"],"names":["axios","accept","Authorization","fetchTrendingMovies","response","data","results","fetchMovieById","id","fetchMoviesByName","value","params","query","include_adult","fetchMovieCast","cast","fetchMovieReviews","LinkStyled","styled","Link","colors","ListItemStyled","ListStyled","MoviesList","movies","location","useLocation","map","title","to","routes","state","from","headerText","linkText","linkTextHover","buttonActiveBackground","buttonHoverBackground","buttonActiveText","useFetchTrendingMovies","useState","setMovies","isLoading","setIsLoading","error","setError","useEffect","fetchData","length","Error","message","useFetchMoviesByName","useSearchParams","get","useFetchMovieById","movie","setMovie","movieId","useParams","Object","entries"],"sourceRoot":""}