{"version":3,"file":"static/js/876.22f60e22.chunk.js","mappings":"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","sources":["api-service/api-service.js","helpers/color.js","hooks/useFetchMovieById.js","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","components/GoBackLink/GoBackLink.styled.jsx","components/GoBackLink/GoBackLink.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\n// const API_KEY = 'fc003692354e60dd191d57f224193ebc';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers = {\n  accept: 'application/json',\n  Authorization:\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmYzAwMzY5MjM1NGU2MGRkMTkxZDU3ZjIyNDE5M2ViYyIsInN1YiI6IjY0OTRiYzBkOTdlYWI0MDE0NjUzYTg0OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.eRloYStb0E7htYX_KZc4cK1BXIC7CsOABKJUGMS2eo4',\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get('trending/movie/day');\n  return response.data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(`movie/${id}`);\n  return response.data;\n};\n\nexport const fetchMoviesByName = async value => {\n  if (!value) return;\n  const response = await axios.get(`search/movie`, {\n    params: {\n      query: value,\n      include_adult: false,\n    },\n  });\n  return response.data.results;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(`movie/${id}/credits`);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(`movie/${id}/reviews`);\n  return response.data.results;\n};\n","export const colors = {\n  headerText: '#434852',\n  linkText: '#36393f',\n  linkTextHover: '#e78310',\n  buttonActiveBackground: '#5e5e5e',\n  buttonHoverBackground: '#18b4db',\n  buttonActiveText: '#fff',\n};\n","import { fetchMovieById } from 'api-service/api-service';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchMovieById = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    setMovie({});\n    const fetchData = async () => {\n      try {\n        const response = await fetchMovieById(movieId);\n        setMovie(response);\n        if (!response) throw new Error('Sorry. There are no movies ... ');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return { movie, isLoading, error };\n};\n","import styled from '@emotion/styled';\nimport { colors } from 'helpers';\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n\n  margin-bottom: 24px;\n`;\nexport const PosterImage = styled.img`\n  display: block;\n  width: auto;\n  height: 500px;\n`;\n\nexport const DescriptionBlock = styled.div`\n  padding-left: 24px;\n`;\n\nexport const InfoWrapper = styled.div`\n  /* border-top: 1px solid #bbb8b8; */\n  /* border-bottom: 1px solid #bbb8b8; */\n  background-color: #f3eeee;\n\n  padding: 8px;\n`;\n\nexport const InfoList = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n\n  li a {\n    color: ${colors.linkText};\n  }\n\n  li a:hover,\n  li a:focus {\n    color: ${colors.linkTextHover};\n  }\n`;\n","import { Link, Outlet } from 'react-router-dom';\nimport { routes } from 'service/routes-service';\nimport {\n  CardWrapper,\n  DescriptionBlock,\n  InfoList,\n  InfoWrapper,\n  PosterImage,\n} from './MovieCard.styled';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({ movie }) => {\n  const { title, poster_path, status, vote_average, overview, genres } = movie;\n\n  const normalizedGenres = genres\n    ? genres.map(({ name }) => name).join(', ')\n    : 'none';\n  return (\n    <>\n      <CardWrapper>\n        <div>\n          <PosterImage\n            src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n            alt={title}\n          />\n        </div>\n        <DescriptionBlock>\n          <h3>{title}</h3>\n          <p>Status: {status}</p>\n          <p>User score: {vote_average}</p>\n          <h4>Overview</h4>\n          <p>{overview}</p>\n          <h5>Genres</h5>\n          <p>{normalizedGenres}</p>\n        </DescriptionBlock>\n      </CardWrapper>\n      <div>\n        <InfoWrapper>\n          <p>Additional information</p>\n          <InfoList>\n            <li>\n              <Link to={routes.CAST}>Casts</Link>\n            </li>\n            <li>\n              <Link to={routes.REVIEWS}>Reviews</Link>\n            </li>\n          </InfoList>\n        </InfoWrapper>\n        <Outlet />\n      </div>\n    </>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    poster_path: PropTypes.string,\n    status: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.array,\n  }),\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const LinkWrapper = styled.div`\n  padding-top: 12px;\n  padding-bottom: 12px;\n`;\n\nexport const LinkStyled = styled(Link)`\n  padding: 8px;\n  max-width: 40px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  text-decoration: none;\n  color: #fff;\n\n  background-color: #646363;\n  border: 1px solid transparent;\n  border-radius: 2px;\n\n  &:hover {\n    color: #646363;\n    background-color: #fff;\n    border-color: #646363;\n  }\n\n  &:active {\n    color: #fff;\n    background-color: #e78310;\n    border-color: transparent;\n  }\n`;\n","import { useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { routes } from 'service/routes-service';\nimport { LinkStyled, LinkWrapper } from './GoBackLink.styled';\n\nexport const GoBackLink = () => {\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? routes.MOVIES);\n  return (\n    <LinkWrapper>\n      <LinkStyled to={backLinkLocationRef.current} state={{ from: location }}>\n        Back\n      </LinkStyled>\n    </LinkWrapper>\n  );\n};\n","import { Loader } from 'components/Loader';\nimport { MovieCard } from 'components/MovieCard';\nimport { GoBackLink } from 'components/GoBackLink/GoBackLink';\nimport { useFetchMovieById } from 'hooks/useFetchMovieById';\n\nconst MovieDetails = () => {\n  const { movie, isLoading, error } = useFetchMovieById();\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {movie && (\n        <section>\n          <GoBackLink />\n          <MovieCard movie={movie} />\n        </section>\n      )}\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["axios","accept","Authorization","fetchTrendingMovies","response","data","results","fetchMovieById","id","fetchMoviesByName","value","params","query","include_adult","fetchMovieCast","cast","fetchMovieReviews","colors","headerText","linkText","linkTextHover","buttonActiveBackground","buttonHoverBackground","buttonActiveText","useFetchMovieById","useState","movie","setMovie","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchData","Error","message","CardWrapper","styled","PosterImage","DescriptionBlock","InfoWrapper","InfoList","MovieCard","title","poster_path","status","vote_average","overview","genres","normalizedGenres","map","name","join","src","alt","to","routes","LinkWrapper","LinkStyled","Link","GoBackLink","location","useLocation","backLinkLocationRef","useRef","state","from","current","Loader"],"sourceRoot":""}